plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
	id 'com.moowork.node' version '1.2.0'
}

group = 'com.bamin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'mysql:mysql-connector-java'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.h2database:h2:1.4.199'
	testImplementation 'io.rest-assured:rest-assured:4.1.1'
	testImplementation 'io.rest-assured:json-path:4.1.1'
	testImplementation 'io.rest-assured:xml-path:4.1.1'
	testImplementation 'io.rest-assured:json-schema-validator:4.1.1'

	runtimeOnly 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

	compileOnly 'org.projectlombok:lombok:1.18.8'
	annotationProcessor 'org.projectlombok:lombok:1.18.8'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

task userNpmBuild(type: NpmTask) {
	workingDir = file('./front/user')
	args = ['run', 'build']
}

task adminNpmBuild(type: NpmTask) {
	workingDir = file('./front/admin')
	args = ['run', 'generate']
}

task doBuild(type: Zip) {
	def tasks = [userNpmBuild, adminNpmBuild, clean, build]
	for (int i = 0; i < tasks.size() - 1; i++) {
		tasks[i + 1].mustRunAfter(tasks[i])
	}
	dependsOn(tasks)
}